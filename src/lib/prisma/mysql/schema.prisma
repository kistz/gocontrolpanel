generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Maps {
  id             String @id @default(uuid())
  name           String
  uid            String @unique
  fileName       String
  author         String
  authorNickname String
  authorTime     Int
  goldTime       Int
  silverTime     Int
  bronzeTime     Int

  submitter    String?
  timestamp    DateTime?
  fileUrl      String?   @unique
  thumbnailUrl String?   @unique
  uploadCheck  DateTime?

  records Records[]
  matches Matches[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("maps")
}

model Users {
  id            String  @id @default(uuid())
  login         String  @unique
  nickName      String
  path          String
  admin         Boolean @default(false)
  ubiUid        String?
  permissions   Json    @default("[]")
  authenticated Boolean @default(false)

  notifications Notifications[]

  groupMembers        GroupMember[]
  hetznerProjectUsers HetznerProjectUser[]
  userServers         UserServers[]
  records             Records[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Records {
  id          String  @id @default(uuid())
  mapId       String
  map         Maps    @relation(fields: [mapId], references: [id])
  login       String?
  mapUid      String
  time        Int
  round       Int?
  checkpoints Json    @default("[]")

  matchId String?
  match   Matches? @relation(fields: [matchId], references: [id], onDelete: Cascade)

  user Users? @relation(fields: [login], references: [login])

  serverId String?
  server   Servers? @relation(fields: [serverId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([matchId, login, round])
  @@index([deletedAt])
  @@index([mapId])
  @@map("records")
}

model Interfaces {
  id              String @id @default(uuid())
  name            String
  interfaceString String @db.LongText

  serverId String
  server   Servers @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("interfaces")
}

model Groups {
  id          String  @id @default(uuid())
  name        String
  description String
  public      Boolean @default(false)

  groupServers GroupServers[]
  groupMembers GroupMember[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("groups")
}

model GroupMember {
  userId  String
  groupId String
  role    GroupRole

  user  Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Groups @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
  @@map("group_members")
}

enum GroupRole {
  Admin
  Moderator
  Member
}

model HetznerProjects {
  id                  String               @id @default(uuid())
  name                String
  apiTokens           Json
  hetznerProjectUsers HetznerProjectUser[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("hetzner_projects")
}

model HetznerProjectUser {
  userId    String
  projectId String
  role      HetznerProjectRole

  user    Users           @relation(fields: [userId], references: [id], onDelete: Cascade)
  project HetznerProjects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
  @@map("hetzner_project_users")
}

enum HetznerProjectRole {
  Admin
  Moderator
}

model Servers {
  id                  String  @id @default(uuid())
  name                String
  description         String
  host                String
  port                Int
  user                String
  password            String
  filemanagerUrl      String?
  filemanagerPassword String?

  manualRouting     Boolean @default(false)
  messageFormat     String?
  connectMessage    String?
  disconnectMessage String?

  interfaces    Interfaces[]
  groupServers  GroupServers[]
  userServers   UserServers[]
  serverPlugins ServerPlugins[]
  matches       Matches[]
  records       Records[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("servers")
}

model UserServers {
  userId   String
  serverId String
  role     UserServerRole

  user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  server Servers @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@id([userId, serverId])
  @@map("user_servers")
}

enum UserServerRole {
  Admin
  Moderator
  Member
}

model GroupServers {
  groupId  String
  serverId String

  group  Groups  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  server Servers @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@id([groupId, serverId])
  @@map("group_servers")
}

model Roles {
  id          String  @id @default(uuid())
  name        String
  description String?
  permissions Json

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("roles")
}

model Commands {
  id          String  @id @default(uuid())
  name        String
  description String?
  command     String
  parameters  Json?

  pluginId String?
  plugin   Plugins? @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("commands")
}

model Plugins {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  commands      Commands[]
  serverPlugins ServerPlugins[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("plugins")
}

model ServerPlugins {
  serverId String
  pluginId String
  enabled  Boolean
  config   Json?

  server Servers @relation(fields: [serverId], references: [id], onDelete: Cascade)
  plugin Plugins @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@id([serverId, pluginId])
  @@map("server_plugins")
}

model Notifications {
  id          String   @id @default(uuid())
  userId      String
  type        String
  message     String
  description String?
  read        Boolean  @default(false)
  timestamp   DateTime @default(now())
  serverId    String?

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("notifications")
}

model HetznerServers {
  id         String  @id @default(uuid())
  hetznerId  Int     @unique
  publicKey  String? @db.LongText
  privateKey Bytes?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("hetzner_servers")
}

model Matches {
  id    String @id @default(uuid())
  mapId String
  map   Maps   @relation(fields: [mapId], references: [id])
  mode  String

  records Records[]

  serverId String
  server   Servers @relation(fields: [serverId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@index([mapId])
  @@map("matches")
}
